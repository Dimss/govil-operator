kind: DeploymentConfig
apiVersion: apps.openshift.io/v1
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  labels:
    profile: lab
  name: "{{resources.mongo.dbhost}}"
  namespace: "{{namespace}}"
spec:
  replicas: 1
  selector:
    name: "{{resources.mongo.dbhost}}"
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: "{{resources.mongo.dbhost}}"
    spec:
      containers:
      - capabilities: {}
        env:
        - name: MONGODB_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: "{{resources.mongo.dbhost}}"
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: "{{resources.mongo.dbhost}}"
        - name: MONGODB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-admin-password
              name: "{{resources.mongo.dbhost}}"
        - name: MONGODB_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: "{{resources.mongo.dbhost}}"
        image: "{{resources.mongo.dbimage}}"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          initialDelaySeconds: 30
          tcpSocket:
            port: 27017
          timeoutSeconds: 1
        name: mongodb
        ports:
        - containerPort: 27017
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -i
            - -c
            - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
              --eval="quit()"
          initialDelaySeconds: 3
          timeoutSeconds: 1
        resources:
          limits:
            memory: 512Mi
        securityContext:
          capabilities: {}
          privileged: false
        terminationMessagePath: /dev/termination-log
        volumeMounts:
        - mountPath: /var/lib/mongodb/data
          name: "{{resources.mongo.dbhost}}-data"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: "{{resources.mongo.dbhost}}-data"
        persistentVolumeClaim:
          claimName: "{{resources.mongo.dbhost}}"
